<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Webdriver on Selenium</title><link>https://www.selenium.dev/tags/webdriver/</link><description>Recent content in Webdriver on Selenium</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 13 Dec 2023 10:37:28 +0000</lastBuildDate><atom:link href="https://www.selenium.dev/tags/webdriver/index.xml" rel="self" type="application/rss+xml"/><item><title>Removal of AbstractEventListener + EventFiringWebDriver + WebDriverEventListener</title><link>https://www.selenium.dev/blog/2023/java-removal-of-deprecated-events-classes/</link><pubDate>Fri, 08 Dec 2023 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/blog/2023/java-removal-of-deprecated-events-classes/</guid><description>Upgrading to WebDriverListener and EventFiringDecorator Decorating the webdriver
new EventFiringWebDriver(driver); // Old approach new EventFiringDecorator().decorate(driver); // New approach Implementing method wrappers One may find the need to have their own custom implementations be used for underlying decorated method calls. An example may be wanting to use your own findElement implementation to store metadata from web elements. One can go down a deep rabbit hole of decorators ( extending WebDriverDecorator and such ), so to keep things simple we will extend EventFiringDecorator since we want a single decorator to handle all our listener events.</description></item><item><title>InvalidSelectorException has changed</title><link>https://www.selenium.dev/blog/2023/invalid-selector-exception-has-changed/</link><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/blog/2023/invalid-selector-exception-has-changed/</guid><description>Before Selenium 4.8.2 in Java and C#, when an invalid locator was used to identify an element, the resulting behavior would be inconsistent in our bindings.
For example, let&amp;rsquo;s check the following code:
ArrayList&amp;lt;Class&amp;lt;? extends Exception&amp;gt;&amp;gt; expectedExceptions = new ArrayList&amp;lt;&amp;gt;(); expectedExceptions.add(org.openqa.selenium.NoSuchElementException.class); expectedExceptions.add(org.openqa.selenium.StaleElementReferenceException.class); expectedExceptions.add(org.openqa.selenium.ElementNotInteractableException.class); expectedExceptions.add(org.openqa.selenium.InvalidElementStateException.class); return new FluentWait&amp;lt;&amp;gt;(driver) .withTimeout(Duration.ofMillis(ELEMENT_IDENTIFICATION_TIMEOUT)) .pollingEvery(Duration.ofMillis(ELEMENT_IDENTIFICATION_POLLING_DELAY)) .ignoreAll(expectedExceptions) .until(nestedDriver -&amp;gt; { nestedDriver.findElement(By.xpath(&amp;#34;invalid-xpath&amp;#34;)).click; }); The expected result before this change would be that the driver waits until the timeout expires and then throw an InvalidSelectorException.</description></item><item><title>BELLATRIX Test Automation Framework for C# and JAVA</title><link>https://www.selenium.dev/blog/2022/bellatrix-test-automation-framework/</link><pubDate>Wed, 16 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/blog/2022/bellatrix-test-automation-framework/</guid><description>Over the last decade, a large ecosystem of Open Source projects has sprouted up around Selenium. Selenium is often used for automating web applications for testing purposes, but it does not include a testing framework. Nowadays, Selenium Ecosystem initiatives try to give popularity to popular open-source test automation frameworks maintained by people outside of the core Selenium maintainers. One of these frameworks is BELLATRIX, invented by Anton Angelov. It has two versions - C# and Java.</description></item><item><title>Dev and Beta Channel Browsers via Docker Selenium</title><link>https://www.selenium.dev/blog/2022/dev-and-beta-channel-browsers-via-docker-selenium/</link><pubDate>Tue, 23 Aug 2022 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/blog/2022/dev-and-beta-channel-browsers-via-docker-selenium/</guid><description>The Docker Selenium browser Beta and Dev channel releases are now regularly published to Docker Hub and updated every two days. This enables testers and developers to test their applications on pre-release versions of Google Chrome, Mozilla Firefox, and Microsoft Edge before their official releases, using container tools, such as Docker. This empowers teams to stay ahead of the curve and catch potential showstoppers in their CI environment before those issues have an impact on their users.</description></item><item><title>Removing Legacy Protocol Support</title><link>https://www.selenium.dev/blog/2022/legacy-protocol-support/</link><pubDate>Fri, 20 May 2022 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/blog/2022/legacy-protocol-support/</guid><description>The Selenium team prides itself on how seriously it takes backwards compatibility. A lot of care has gone into the Java bindings, especially, to ensure very few breaking changes over the years. There is Selenium code written 15 years ago that can still run with Selenium 4 libraries! Providing this exceptional amount of support comes with a large maintenance burden, though, and we need to be able to properly meet the needs of the vast majority of our userbase.</description></item><item><title>Locate your locators - Python bindings changes upcoming</title><link>https://www.selenium.dev/blog/2022/python-locators-se4/</link><pubDate>Tue, 01 Feb 2022 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/blog/2022/python-locators-se4/</guid><description>In real estate, the mantra for finding a new house or office space is &amp;ldquo;location, location, location!&amp;rdquo;. It could be said that when working with Selenium, a critical aspect of writing tests is &amp;ldquo;locators, locators, locators!&amp;rdquo;. Having a robust locator strategy - in your app under test and in your test framework - is highly important for effective testing.
If you are a Pythonista like myself and using Selenium for your test automation, then there are some important changes coming to how locators are defined and used.</description></item><item><title>IE Mode in Edge supported by IEDriver</title><link>https://www.selenium.dev/blog/2022/ie-edge-support/</link><pubDate>Tue, 18 Jan 2022 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/blog/2022/ie-edge-support/</guid><description>With the retirement of Internet Explorer 11 (IE 11) later this year, the folks in Redmond have helped the Selenium project with getting IE Mode in Microsoft Edge working in IEDriver.
IE 11 is due to retire on 15 June 2022 for certain versions of Windows 10. After this date, the Selenium project recommends that you test your IE sites with IE Mode in Microsoft Edge. The Selenium Project will not remove support for IE 11 when it retires but we will not actively fix issues as we have done with previous versions of IE.</description></item><item><title>A Tour of 4: New Commands</title><link>https://www.selenium.dev/blog/2021/a-tour-of-4-new-commands/</link><pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/blog/2021/a-tour-of-4-new-commands/</guid><description>Before we ship Selenium 4, I thought it would be nice to introduce some of the new features in-depth. Of course, all of the features we&amp;rsquo;re covering are in the main WebDriver documentation, so if you&amp;rsquo;re not one for reading blog posts, then feel free to dive in there!
You may well be familiar with how to start a Selenium server: you just do something like java -jar selenium-server-4.0.0.jar standalone and away you go!</description></item><item><title>A Tour of 4: Authentication</title><link>https://www.selenium.dev/blog/2021/a-tour-of-4-authentication/</link><pubDate>Sun, 10 Oct 2021 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/blog/2021/a-tour-of-4-authentication/</guid><description>Before we ship Selenium 4, I thought it would be nice to introduce some of the new features in-depth. Of course, all of the features we&amp;rsquo;re covering are in the main WebDriver documentation, so if you&amp;rsquo;re not one for reading blog posts, then feel free to dive in there!
The first thing I&amp;rsquo;d like to introduce you to is Selenium 4&amp;rsquo;s new-found ability to authenticate to websites. We&amp;rsquo;ve always been able to handle &amp;ldquo;form-based&amp;rdquo; authentication, where a login page has some INPUT elements that you need to enter the user name and password, but handling sites that use basic or digest authentication has always been harder.</description></item><item><title>Results of the first ever selenium survey</title><link>https://www.selenium.dev/blog/2021/selenium-survey-results/</link><pubDate>Tue, 12 Jan 2021 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/blog/2021/selenium-survey-results/</guid><description>Below is a summary of the Selenium survey that was collected.
Batteries included Browser Management Unsurprisingly, people find having to manage browsers a task they wish they didn’t have to do and wish that Selenium did this. 59.5% of respondents want Selenium to manage the browsers for them. This, though the question didn’t ask this, is to include the browser drivers.
Frameworks The results show an interesting view into framework usage.</description></item><item><title>Browser Testing and Tools WG Meeting @ TPAC 2020</title><link>https://www.selenium.dev/blog/2020/webdriver-tpac-meeting-2020/</link><pubDate>Thu, 29 Oct 2020 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/blog/2020/webdriver-tpac-meeting-2020/</guid><description>It&amp;rsquo;s that time of the year where working groups from the W3C meet up to discuss the various standards that are being worked on.
Within the Browser Testing and Tools Working Group, there are 2 different standards.
We have:
WebDriver WebDriver-Bidi The first is what is commonly supported by the Selenium Project and has support from Apple, Mozilla, Microsoft, and Google in their browsers. It is also supported by various Selenium in the cloud providers like Sauce Labs and BrowserStack.</description></item><item><title>Atoms have come to Selenium IDE</title><link>https://www.selenium.dev/blog/2010/atoms-have-come-to-selenium-ide/</link><pubDate>Thu, 09 Dec 2010 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/blog/2010/atoms-have-come-to-selenium-ide/</guid><description>As mentioned in Simon’s Going Atomic: Why? and Going Atomic: How, part of the merging of Selenium and WebDriver is to share common code between the two. And as of the 1.0.10 release of Selenium IDE, this merged code, ‘atoms’ is now included.
Some early users of this release are noticing that this the atom that drives assertAttribute and verifyAttribute is causing their scripts to break. This post explains the ‘why’ and suggests how to fix them as well.</description></item></channel></rss>